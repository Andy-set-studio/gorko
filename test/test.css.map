{"version":3,"sourceRoot":"","sources":["../src/generator/workers/_generate-css-vars.scss","../src/generator/workers/_process-vars.scss","../src/mixins/_generate-utility-classes.scss","../src/generator/workers/_generate-css.scss","test.scss","../src/mixins/_apply-utility.scss"],"names":[],"mappings":"AAeI;ECFE;EAAA;EAAA;;;AD2BI;EC3BJ;EAAA;;;ADoBI;EACE;ICrBN;IAAA;;;AD2BI;EC3BJ;EAAA;;;ACPJ;ACWE;EAEI;;;AAFJ;EAEI;;;AAFJ;EAEI;;;AAFJ;EAEI;;;AAFJ;EAEI;;;AAFJ;EAEI;;;AAFJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;AAJJ;EAII;;;ADLJ;ECCA;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;;ADLJ;ECCA;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;;ADLJ;ECCA;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;EAJJ;IAII;;;ADAN;AEfF;EACE;ECME","file":"test.css","sourcesContent":["@import 'process-vars';\n\n/// GENERATE CSS VARS MIXIN\n/// Will either generate a simple collection of CSS Custom Properties\n/// or if `themes` are defined, it’ll loop each theme and generate Custom Properties\n///\n/// @param {map} $vars - A collection of keys and values\n///\n@mixin generate-css-vars($vars) {\n  @if ($vars) {\n    /// First, we look for themes to see if we need to do extra work\n    $themes: map-get($vars, 'themes');\n\n    /// Still generate the custom properties but remove the themes from the $vars\n    /// so we don't confuse the generator\n    :root {\n      @include process-vars(map-remove($vars, 'themes'));\n    }\n\n    @if ($themes) {\n      @each $name, $theme in $themes {\n        $prefix: map-get($theme, 'prefix');\n        $tokens: map-get($theme, 'tokens');\n        $prefers-color-scheme: map-get($theme, 'prefers-color-scheme');\n\n        /// A theme can be defined without a prefix, but we need one to create\n        /// a valid CSS rule, so we’ll set it as :root\n        @if not($prefix) {\n          $prefix: ':root';\n        }\n\n        /// If a prefers-color-scheme is set, that needs to be a media query\n        @if ($prefers-color-scheme) {\n          @media (prefers-color-scheme: #{$prefers-color-scheme}) {\n            #{$prefix} {\n              @include process-vars($tokens);\n            }\n          }\n        } @else {\n          /// If not, we can generate the vars within the prefix only instead\n          #{$prefix} {\n            @include process-vars($tokens);\n          }\n        }\n      }\n    } @else {\n      /// No themes, so just generate custom properties for each CSS var\n      :root {\n        @include process-vars($vars);\n      }\n    }\n  }\n}\n","/// PROCESS VARS MIXIN\n/// A reusable looper that generates custom property rules\n///\n/// @param {map} $passed-vars - A collection of keys and values\n///\n@import 'get-namespace';\n\n@mixin process-vars($passed-vars) {\n\n  $namespace: get-namespace('css-vars');\n\n  @each $var, $items in $passed-vars {\n    @each $key, $value in $items {\n      --#{$namespace + $var + '-' + $key}: #{$value};\n    }\n  }\n}\n","@import '../generator/workers/cycle';\n\n/// GENERATE UTILITY CLASSES MIXIN\n/// Runs the utility class generator on demand\n///\n@mixin generate-utility-classes() {\n  /* GORKO: auto-generated utility classes start */\n\n  /// Run the standard cycle first\n  @include cycle('', false);\n\n  /// For each breakpoint, generate a prefix and run the cycle\n  @each $key, $value in map-get($gorko-config, 'breakpoints') {\n    $prefix: #{$key + '\\\\:'};\n    $is-breakpoint: true;\n\n    @media #{$value} {\n      @include cycle($prefix, $is-breakpoint);\n    }\n  }\n\n  /* GORKO: auto-generated utility classes end */\n}\n","/// GENERATE CSS MIXIN\n/// The final CSS generator that takes the process params and generates\n/// a CSS utility.\n///\n/// @param {string} $selector - The CSS selector that should be generated\n/// @param {string} $property - The CSS property that this utility affects\n/// @param {map} $items - The collection of utility items to generate classes for\n/// @param {boolean} $use-css-vars - this is to tell generate-css to use either a value or a CSS Variable\n/// @param {string} $item-key - the key for items which is used for tying each CSS var up to the item value\n///\n@import 'get-namespace';\n\n@mixin generate-css($selector, $property, $items, $use-css-vars, $item-key) {\n\n  $var-namespace: get-namespace('css-vars');\n\n  @each $key, $value in $items {\n    #{'.' + $selector + '-' + $key} {\n      @if ($use-css-vars) {\n        #{ $property }: var(--#{$var-namespace + $item-key + '-' + $key});\n      } @else {\n        #{ $property }: #{$value};\n      }\n    }\n  }\n}\n","@import 'config';\n\n@import '../gorko';\n\n/// A TESTING GROUND FOR FEATURES. MAKE SURE IT'S CLEAR AFTER HERE BEFORE PUSHING\n\nbody {\n  font-size: get-utility-value('text', '900');\n  // background: get-config-value('color', 'blush');\n  @include apply-utility('color', 'blush');\n}\n","@import '../generator/workers/get-config-value';\n\n/// APPLY UTILITY MIXIN\n/// Grab the property and value of one of the $gorko-config utilities\n/// that the generator will generate a class for.\n///\n/// @param {string} $key - The configured utility’s key\n/// @param {string} $value-key - The value key that you are looking for within the utilty\n///\n@mixin apply-utility($key, $value-key) {\n  $values: get-config-value($key, $value-key);\n\n  @if ($values) {\n    #{map-get($values, 'property')}: map-get($values, 'value');\n  }\n}\n"]}